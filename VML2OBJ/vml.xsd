<?xml version="1.0"?>

<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified">

<!-- =========================================================================================== -->

<!-- First, define a bunch of custom types to shorten things later on. -->

<!-- We can't use the "proper" xs:ID type for all our IDs, for instance for layers and
     material fragments, since we must re-use them for each node. Just making them
     arbitrary makes life needlessly hard for loaders. So, we define a simple "id" type
     that is just a letter followed by digits, so it's still a valid xs:ID, which seems
     like a good thing for some reason. -->
<xs:simpleType name="id">
 <xs:restriction base="xs:string">
  <xs:pattern value="[a-z][0-9]+"/>
 </xs:restriction>
</xs:simpleType>

<xs:simpleType name="paramtype">
 <xs:restriction base="xs:string">
  <xs:enumeration value="VN_O_METHOD_PTYPE_INT8"/>
  <xs:enumeration value="VN_O_METHOD_PTYPE_INT16"/>
  <xs:enumeration value="VN_O_METHOD_PTYPE_INT32"/>
  <xs:enumeration value="VN_O_METHOD_PTYPE_UINT8"/>
  <xs:enumeration value="VN_O_METHOD_PTYPE_UINT16"/>
  <xs:enumeration value="VN_O_METHOD_PTYPE_UINT32"/>
  <xs:enumeration value="VN_O_METHOD_PTYPE_REAL32"/>
  <xs:enumeration value="VN_O_METHOD_PTYPE_REAL64"/>
  <xs:enumeration value="VN_O_METHOD_PTYPE_REAL32_VEC2"/>
  <xs:enumeration value="VN_O_METHOD_PTYPE_REAL32_VEC3"/>
  <xs:enumeration value="VN_O_METHOD_PTYPE_REAL32_VEC4"/>
  <xs:enumeration value="VN_O_METHOD_PTYPE_REAL64_VEC2"/>
  <xs:enumeration value="VN_O_METHOD_PTYPE_REAL64_VEC3"/>
  <xs:enumeration value="VN_O_METHOD_PTYPE_REAL64_VEC4"/>
  <xs:enumeration value="VN_O_METHOD_PTYPE_REAL32_MAT4"/>
  <xs:enumeration value="VN_O_METHOD_PTYPE_REAL32_MAT9"/>
  <xs:enumeration value="VN_O_METHOD_PTYPE_REAL32_MAT16"/>
  <xs:enumeration value="VN_O_METHOD_PTYPE_REAL64_MAT4"/>
  <xs:enumeration value="VN_O_METHOD_PTYPE_REAL64_MAT9"/>
  <xs:enumeration value="VN_O_METHOD_PTYPE_REAL64_MAT16"/>
  <xs:enumeration value="VN_O_METHOD_PTYPE_STRING"/>
  <xs:enumeration value="VN_O_METHOD_PTYPE_NODE"/>
  <xs:enumeration value="VN_O_METHOD_PTYPE_LAYER"/>
 </xs:restriction>
</xs:simpleType>

<xs:simpleType name="int8-vec">
 <xs:list itemType="xs:byte"/>
</xs:simpleType>

<xs:simpleType name="int16-vec">
 <xs:list itemType="xs:short"/>
</xs:simpleType>

<xs:simpleType name="int24">
 <xs:restriction base="xs:int">
  <xs:minInclusive value="-8388608"/>
  <xs:maxInclusive value="8388607"/>
 </xs:restriction>
</xs:simpleType>

<xs:simpleType name="int24-vec">
 <xs:list itemType="int24"/>
</xs:simpleType>

<xs:simpleType name="int32-vec">
 <xs:list itemType="xs:int"/>
</xs:simpleType>

<xs:simpleType name="uint1">
 <xs:restriction base="xs:unsignedByte">
  <xs:maxInclusive value="1"/>
 </xs:restriction>
</xs:simpleType>

<xs:simpleType name="uint1-vec">
 <xs:list itemType="uint1"/>
</xs:simpleType>

<xs:simpleType name="uint1-vec64">
 <xs:restriction base="uint1-vec">
  <xs:length value="64"/>
 </xs:restriction>
</xs:simpleType>

<xs:simpleType name="uint8-vec">
 <xs:list itemType="xs:unsignedByte"/>
</xs:simpleType>

<xs:simpleType name="uint8-vec64">
 <xs:restriction base="uint8-vec">
  <xs:length value="64"/>
 </xs:restriction>
</xs:simpleType>

<xs:simpleType name="uint16-vec">
 <xs:list itemType="xs:unsignedShort"/>
</xs:simpleType>

<xs:simpleType name="uint16-vec64">
 <xs:restriction base="uint16-vec">
  <xs:length value="64"/>
 </xs:restriction>
</xs:simpleType>

<xs:simpleType name="uint32-vec">
 <xs:list itemType="xs:unsignedInt"/>
</xs:simpleType>

<xs:simpleType name="uint32-vec2">
 <xs:restriction base="uint32-vec">
  <xs:length value="2"/>
 </xs:restriction>
</xs:simpleType>

<xs:simpleType name="uint32-vec3">
 <xs:restriction base="uint32-vec">
  <xs:length value="3"/>
 </xs:restriction>
</xs:simpleType>

<xs:simpleType name="uint32-vec4">
 <xs:restriction base="uint32-vec">
  <xs:length value="4"/>
 </xs:restriction>
</xs:simpleType>

<xs:simpleType name="real32-vec">
 <xs:list itemType="xs:float"/>
</xs:simpleType>

<xs:simpleType name="real32-vec64">
 <xs:restriction base="real32-vec">
  <xs:length value="64"/>
 </xs:restriction>
</xs:simpleType>

<xs:simpleType name="real64-vec">
 <xs:list itemType="xs:double"/>
</xs:simpleType>

<xs:simpleType name="real64-vec2">
 <xs:restriction base="real64-vec">
  <xs:length value="2"/>
 </xs:restriction>
</xs:simpleType>

<xs:simpleType name="real64-vec3">
 <xs:restriction base="real64-vec">
  <xs:length value="3"/>
 </xs:restriction>
</xs:simpleType>

<xs:simpleType name="real64-vec4">
 <xs:restriction base="real64-vec">
  <xs:length value="4"/>
 </xs:restriction>
</xs:simpleType>

<xs:simpleType name="real64-vec64">
 <xs:restriction base="real64-vec">
  <xs:length value="64"/>
 </xs:restriction>
</xs:simpleType>

<xs:attributeGroup name="tile-attrs">
 <xs:attribute name="tile_x" type="xs:unsignedShort" use="required"/>
 <xs:attribute name="tile_y" type="xs:unsignedShort" use="required"/>
 <xs:attribute name="tile_z" type="xs:unsignedShort" use="required"/>
</xs:attributeGroup>

<!-- This was not easy to figure out how to express. Would have liked to have used
     an extension from a base type with the attributes, but gave up. This works. -->
<xs:complexType name="tile-uint1">
 <xs:simpleContent>
  <xs:extension base="uint1-vec64">
   <xs:attributeGroup ref="tile-attrs"/>
  </xs:extension>
 </xs:simpleContent>
</xs:complexType>

<xs:complexType name="tile-uint8">
 <xs:simpleContent>
  <xs:extension base="uint8-vec64">
   <xs:attributeGroup ref="tile-attrs"/>
  </xs:extension>
 </xs:simpleContent>
</xs:complexType>

<xs:complexType name="tile-uint16">
 <xs:simpleContent>
  <xs:extension base="uint16-vec64">
   <xs:attributeGroup ref="tile-attrs"/>
  </xs:extension>
 </xs:simpleContent>
</xs:complexType>

<xs:complexType name="tile-real32">
 <xs:simpleContent>
  <xs:extension base="real32-vec64">
   <xs:attributeGroup ref="tile-attrs"/>
  </xs:extension>
 </xs:simpleContent>
</xs:complexType>

<xs:complexType name="tile-real64">
 <xs:simpleContent>
  <xs:extension base="real64-vec64">
   <xs:attributeGroup ref="tile-attrs"/>
  </xs:extension>
 </xs:simpleContent>
</xs:complexType>

<xs:complexType name="key-1d">
 <xs:all>
  <xs:element name="pre-value"  type="xs:double"/>
  <xs:element name="pre-pos"    type="xs:unsignedInt"/>
  <xs:element name="value"      type="xs:double"/>
  <xs:element name="post-value" type="xs:double"/>
  <xs:element name="post-pos"   type="xs:unsignedInt"/>
 </xs:all>
 <xs:attribute name="pos" type="xs:double"/>
</xs:complexType>

<xs:complexType name="key-2d">
 <xs:all>
  <xs:element name="pre-value"  type="real64-vec2"/>
  <xs:element name="pre-pos"    type="uint32-vec2"/>
  <xs:element name="value"      type="real64-vec2"/>
  <xs:element name="post-value" type="real64-vec2"/>
  <xs:element name="post-pos"   type="uint32-vec2"/>
 </xs:all>
 <xs:attribute name="pos" type="xs:double"/>
</xs:complexType>

<xs:complexType name="key-3d">
 <xs:all>
  <xs:element name="pre-value"  type="real64-vec3"/>
  <xs:element name="pre-pos"    type="uint32-vec3"/>
  <xs:element name="value"      type="real64-vec3"/>
  <xs:element name="post-value" type="real64-vec3"/>
  <xs:element name="post-pos"   type="uint32-vec3"/>
 </xs:all>
 <xs:attribute name="pos" type="xs:double"/>
</xs:complexType>

<xs:complexType name="key-4d">
 <xs:all>
  <xs:element name="pre-value"  type="real64-vec4"/>
  <xs:element name="pre-pos"    type="uint32-vec4"/>
  <xs:element name="value"      type="real64-vec4"/>
  <xs:element name="post-value" type="real64-vec4"/>
  <xs:element name="post-pos"   type="uint32-vec4"/>
 </xs:all>
 <xs:attribute name="pos" type="xs:double"/>
</xs:complexType>

<xs:complexType name="block-int8">
 <xs:simpleContent>
  <xs:extension base="int8-vec1024">
   <xs:attribute name="index" type="xs:unsignedInt"/>
  </xs:extension>
 </xs:simpleContent>
</xs:complexType>

<xs:simpleType name="int8-vec1024">
 <xs:restriction base="int8-vec">
  <xs:length value="1024"/>
 </xs:restriction>
</xs:simpleType>

<xs:simpleType name="int16-vec512">
 <xs:restriction base="int16-vec">
  <xs:length value="512"/>
 </xs:restriction>
</xs:simpleType>

<xs:simpleType name="int24-vec384">
 <xs:restriction base="int24-vec">
  <xs:length value="384"/>
 </xs:restriction>
</xs:simpleType>

<xs:simpleType name="int32-vec256">
 <xs:restriction base="int32-vec">
  <xs:length value="256"/>
 </xs:restriction>
</xs:simpleType>

<xs:simpleType name="real32-vec256">
 <xs:restriction base="real32-vec">
  <xs:length value="256"/>
 </xs:restriction>
</xs:simpleType>

<xs:simpleType name="real64-vec128">
 <xs:restriction base="real64-vec">
  <xs:length value="128"/>
 </xs:restriction>
</xs:simpleType>

<!-- =========================================================================================== -->

<!-- Nodes, defined by extending a "node" base type. -->

<xs:complexType name="node">
 <xs:choice minOccurs="0">
  <xs:element name="tags">
   <xs:complexType>
    <xs:choice maxOccurs="unbounded">
     <xs:element name="taggroup">
      <xs:complexType>
       <xs:choice maxOccurs="unbounded">

        <xs:element name="tag-boolean">
         <xs:complexType>
          <xs:simpleContent>
           <xs:extension base="xs:boolean">
           <xs:attribute name="name" type="xs:string" use="required"/>
           </xs:extension>
          </xs:simpleContent>
         </xs:complexType>
        </xs:element>

	<xs:element name="tag-uint32">
         <xs:complexType>
          <xs:simpleContent>
           <xs:extension base="xs:unsignedInt">
           <xs:attribute name="name" type="xs:string" use="required"/>
           </xs:extension>
          </xs:simpleContent>
         </xs:complexType>
        </xs:element>

	<xs:element name="tag-real64">
         <xs:complexType>
          <xs:simpleContent>
           <xs:extension base="xs:double">
           <xs:attribute name="name" type="xs:string" use="required"/>
           </xs:extension>
          </xs:simpleContent>
         </xs:complexType>
        </xs:element>

        <xs:element name="tag-string">
         <xs:complexType>
          <xs:simpleContent>
           <xs:extension base="xs:string">
           <xs:attribute name="name" type="xs:string" use="required"/>
           </xs:extension>
          </xs:simpleContent>
         </xs:complexType>
        </xs:element>

	<xs:element name="tag-real64-vec3">
         <xs:complexType>
          <xs:simpleContent>
           <xs:extension base="real64-vec3">
           <xs:attribute name="name" type="xs:string" use="required"/>
           </xs:extension>
          </xs:simpleContent>
         </xs:complexType>
        </xs:element>

        <xs:element name="tag-link">
         <xs:complexType>
          <xs:simpleContent>
           <xs:extension base="id">
           <xs:attribute name="name" type="xs:string" use="required"/>
           </xs:extension>
          </xs:simpleContent>
         </xs:complexType>
        </xs:element>

        <xs:element name="tag-animation">
         <xs:complexType>
          <xs:all>
           <xs:element name="curve" type="id"/>
           <xs:element name="start" type="xs:unsignedInt"/>
           <xs:element name="end"   type="xs:unsignedInt"/>
          </xs:all>
          <xs:attribute name="name" type="xs:string" use="required"/>
         </xs:complexType>
        </xs:element>

        <xs:element name="tag-blob">
         <xs:complexType>
          <xs:simpleContent>
           <xs:extension base="uint8-vec">
           <xs:attribute name="name" type="xs:string" use="required"/>
           </xs:extension>
          </xs:simpleContent>
         </xs:complexType>
        </xs:element>

       </xs:choice>
       <xs:attribute name="name" type="xs:string" use="required"/>
      </xs:complexType>
     </xs:element>
    </xs:choice>
   </xs:complexType>
  </xs:element>
 </xs:choice>
 <xs:attribute name="id" type="xs:ID" use="required"/>
 <xs:attribute name="name" type="xs:string"/>
</xs:complexType>

<xs:complexType name="node-object">
 <xs:complexContent>
  <xs:extension base="node">
   <xs:sequence>
    <xs:element name="transform" minOccurs="0">
     <xs:complexType>
      <xs:sequence>
       <xs:element name="position" type="real64-vec3"/>
       <xs:element name="rotation" type="real64-vec4"/>
       <xs:element name="scale"    type="real64-vec3"/>
      </xs:sequence>
     </xs:complexType>
    </xs:element>

    <xs:element name="light" minOccurs="0" type="real64-vec3"/>

    <xs:element name="links" minOccurs="0">
     <xs:complexType>
     <xs:choice maxOccurs="unbounded">
      <xs:element name="link">
       <xs:complexType>
        <xs:attribute name="node"   type="xs:IDREF" use="required"/>
        <xs:attribute name="label"  type="xs:string" use="required"/>
        <xs:attribute name="target" type="xs:nonNegativeInteger" use="required"/>
       </xs:complexType>
      </xs:element>
     </xs:choice>
     </xs:complexType>
    </xs:element>

    <xs:element name="methodgroups" minOccurs="0">
     <xs:complexType>
      <xs:choice maxOccurs="unbounded">
       <xs:element name="methodgroup">
        <xs:complexType>
         <xs:sequence>
          <xs:element name="method" maxOccurs="unbounded">
           <xs:complexType>
            <xs:sequence>
             <xs:element name="param" maxOccurs="unbounded">
              <xs:complexType>
               <xs:attribute name="name" type="xs:string" use="required"/>
               <xs:attribute name="type" type="paramtype" use="required"/>
              </xs:complexType>
             </xs:element>
            </xs:sequence>
            <xs:attribute name="name" type="xs:string" use="required"/>
           </xs:complexType>
          </xs:element>
         </xs:sequence>
         <xs:attribute name="name" type="xs:string"/>
        </xs:complexType>
       </xs:element>
      </xs:choice>
     </xs:complexType>
    </xs:element>
   </xs:sequence>
  </xs:extension>
 </xs:complexContent>
</xs:complexType>

<xs:complexType name="node-geometry">
 <xs:complexContent>
  <xs:extension base="node">
   <xs:sequence>
    <xs:element name="layers" minOccurs="0">
     <xs:complexType>
      <xs:choice maxOccurs="unbounded">
       <xs:element name="layer-vertex-xyz">
        <xs:complexType>
         <xs:sequence maxOccurs="unbounded">
          <xs:element name="v" type="real64-vec4"/> <!-- FIXME: This is not correct, but it's the best I can figure out how to do. Want: unsignedInt, then vec3 -->
         </xs:sequence>
         <xs:attribute name="name" type="xs:string"/>
        </xs:complexType>
       </xs:element>

       <xs:element name="layer-vertex-uint32">
        <xs:complexType>
         <xs:sequence maxOccurs="unbounded">
          <xs:element name="v" type="uint32-vec2"/>
         </xs:sequence>
         <xs:attribute name="name" type="xs:string"/>
        </xs:complexType>
       </xs:element>

       <xs:element name="layer-vertex-real">
        <xs:complexType>
         <xs:sequence maxOccurs="unbounded">
          <xs:element name="v" type="xs:double"/>
         </xs:sequence>
         <xs:attribute name="name" type="xs:string"/>
        </xs:complexType>
       </xs:element>

       <xs:element name="layer-polygon-corner-uint32">
        <xs:complexType>
         <xs:sequence maxOccurs="unbounded">
          <xs:element name="p" type="uint32-vec4"/>
         </xs:sequence>
         <xs:attribute name="name" type="xs:string"/>
        </xs:complexType>
       </xs:element>

       <xs:element name="layer-polygon-corner-real">
        <xs:complexType>
         <xs:sequence maxOccurs="unbounded">
          <xs:element name="p" type="real64-vec4"/>
         </xs:sequence>
         <xs:attribute name="name" type="xs:string"/>
        </xs:complexType>
       </xs:element>

       <xs:element name="layer-polygon-face-uint8">
        <xs:complexType>
         <xs:sequence maxOccurs="unbounded">
          <xs:element name="p" type="xs:unsignedByte"/>
         </xs:sequence>
         <xs:attribute name="name" type="xs:string"/>
        </xs:complexType>
       </xs:element>

       <xs:element name="layer-polygon-face-uint32">
        <xs:complexType>
         <xs:sequence maxOccurs="unbounded">
          <xs:element name="p" type="xs:unsignedInt"/>
         </xs:sequence>
         <xs:attribute name="name" type="xs:string"/>
        </xs:complexType>
       </xs:element>

       <xs:element name="layer-polygon-face-real">
        <xs:complexType>
         <xs:sequence maxOccurs="unbounded">
          <xs:element name="p" type="xs:double"/>
         </xs:sequence>
         <xs:attribute name="name" type="xs:string"/>
        </xs:complexType>
       </xs:element>
       </xs:choice>
      </xs:complexType>
     </xs:element>

     <xs:element name="vertexcrease" minOccurs="0">
     <xs:complexType>
      <xs:attribute name="layer"   type="xs:string"      use="required"/>
      <xs:attribute name="default" type="xs:unsignedInt" use="required"/>
     </xs:complexType>
    </xs:element>

    <xs:element name="edgecrease" minOccurs="0">
     <xs:complexType>
      <xs:attribute name="layer"   type="xs:string"/>
      <xs:attribute name="default" type="xs:unsignedInt"/>
     </xs:complexType>
    </xs:element>

    <xs:element name="bones" minOccurs="0">
     <!-- FIXME: Bones support missing, here. -->
    </xs:element>
   </xs:sequence>
  </xs:extension>
 </xs:complexContent>
</xs:complexType>

<xs:complexType name="node-bitmap">
 <xs:complexContent>
  <xs:extension base="node">
   <xs:sequence>
    <xs:element name="dimensions">
     <xs:simpleType>
      <xs:restriction>
       <xs:simpleType>
        <xs:list itemType="xs:unsignedInt"/>
       </xs:simpleType>
       <xs:length value="3"/>
      </xs:restriction>
     </xs:simpleType>
    </xs:element>

    <xs:element name="layers">
     <xs:complexType>
      <xs:choice maxOccurs="unbounded">

       <xs:element name="layer-uint1">
        <xs:complexType>
         <xs:sequence>
          <xs:element name="tiles">
           <xs:complexType>
            <xs:sequence maxOccurs="unbounded">
             <xs:element name="tile" type="tile-uint1"/>
            </xs:sequence>
           </xs:complexType>
          </xs:element>
         </xs:sequence>
         <xs:attribute name="name" type="xs:string" use="required"/>
        </xs:complexType>
       </xs:element>

       <xs:element name="layer-uint8">
        <xs:complexType>
         <xs:sequence>
          <xs:element name="tiles">
           <xs:complexType>
            <xs:sequence maxOccurs="unbounded">
             <xs:element name="tile" type="tile-uint8"/>
            </xs:sequence>
           </xs:complexType>
          </xs:element>
         </xs:sequence>
         <xs:attribute name="name" type="xs:string" use="required"/>
        </xs:complexType>
       </xs:element>

       <xs:element name="layer-uint16">
        <xs:complexType>
         <xs:sequence>
          <xs:element name="tiles">
           <xs:complexType>
            <xs:sequence maxOccurs="unbounded">
             <xs:element name="tile" type="tile-uint16"/>
            </xs:sequence>
           </xs:complexType>
          </xs:element>
         </xs:sequence>
         <xs:attribute name="name" type="xs:string" use="required"/>
        </xs:complexType>
       </xs:element>

       <xs:element name="layer-real32">
        <xs:complexType>
         <xs:sequence>
          <xs:element name="tiles">
           <xs:complexType>
            <xs:sequence maxOccurs="unbounded">
             <xs:element name="tile" type="tile-real32"/>
            </xs:sequence>
           </xs:complexType>
          </xs:element>
         </xs:sequence>
         <xs:attribute name="name" type="xs:string" use="required"/>
        </xs:complexType>
       </xs:element>

       <xs:element name="layer-real64">
        <xs:complexType>
         <xs:sequence>
          <xs:element name="tiles">
           <xs:complexType>
            <xs:sequence maxOccurs="unbounded">
             <xs:element name="tile" type="tile-real64"/>
            </xs:sequence>
           </xs:complexType>
          </xs:element>
         </xs:sequence>
         <xs:attribute name="name" type="xs:string" use="required"/>
        </xs:complexType>
       </xs:element>
      </xs:choice>
     </xs:complexType>
    </xs:element>
   </xs:sequence>
  </xs:extension>
 </xs:complexContent>
</xs:complexType>

<xs:complexType name="node-material">
 <xs:complexContent>
  <xs:extension base="node">
   <xs:sequence>
    <xs:element name="fragments">
     <xs:complexType>
      <xs:choice maxOccurs="unbounded">
       <xs:element name="fragment-color">
        <xs:complexType>
         <xs:all>
          <xs:element name="color" type="real64-vec3"/>
         </xs:all>
         <xs:attribute name="id" type="id" use="required"/>
        </xs:complexType>
       </xs:element>

       <xs:element name="fragment-light">
        <xs:complexType>
         <xs:all>
          <xs:element name="type">
           <xs:simpleType>
            <xs:restriction base="xs:string">
             <xs:enumeration value="VN_M_LIGHT_DIRECT"/>
             <xs:enumeration value="VN_M_LIGHT_AMBIENT"/>
             <xs:enumeration value="VN_M_LIGHT_DIRECT_AND_AMBIENT"/>
             <xs:enumeration value="VN_M_LIGHT_BACK_DIRECT"/>
             <xs:enumeration value="VN_M_LIGHT_BACK_AMBIENT"/>
             <xs:enumeration value="VN_M_LIGHT_BACK_DIRECT_AND_AMBIENT"/>
            </xs:restriction>
           </xs:simpleType>
          </xs:element>
          <xs:element name="normal_falloff" type="xs:double"/>
          <xs:element name="brdf"   type="id"  minOccurs="0"/>
          <xs:element name="brdf_r" type="xs:string" minOccurs="0"/>
          <xs:element name="brdf_g" type="xs:string" minOccurs="0"/>
          <xs:element name="brdf_b" type="xs:string" minOccurs="0"/>
         </xs:all>
         <xs:attribute name="id" type="id" use="required"/>
        </xs:complexType>
       </xs:element>

       <xs:element name="fragment-reflection">
        <xs:complexType>
         <xs:all>
          <xs:element name="normal_falloff" type="xs:double"/>
         </xs:all>
         <xs:attribute name="id" type="id" use="required"/>
        </xs:complexType>
       </xs:element>

       <xs:element name="fragment-transparency">
        <xs:complexType>
         <xs:all>
          <xs:element name="normal_falloff" type="xs:double"/>
          <xs:element name="refraction_index" type="xs:double"/>
         </xs:all>
         <xs:attribute name="id" type="id" use="required"/>
        </xs:complexType>
       </xs:element>

       <xs:element name="fragment-geometry">
        <xs:complexType>
         <xs:all>
          <xs:element name="layer_r" type="xs:string"/>
          <xs:element name="layer_g" type="xs:string"/>
          <xs:element name="layer_b" type="xs:string"/>
         </xs:all>
         <xs:attribute name="id" type="id" use="required"/>
        </xs:complexType>
       </xs:element>

       <xs:element name="fragment-texture">
        <xs:complexType>
         <xs:all>
          <xs:element name="bitmap"  type="id" minOccurs="0"/>
          <xs:element name="layer_r" type="xs:string"/>
          <xs:element name="layer_g" type="xs:string"/>
          <xs:element name="layer_b" type="xs:string"/>
          <xs:element name="mapping" type="id"/>
         </xs:all>
         <xs:attribute name="id" type="id" use="required"/>
        </xs:complexType>
       </xs:element>

       <xs:element name="fragment-noise">
        <xs:complexType>
         <xs:all>
          <xs:element name="type">
           <xs:simpleType>
            <xs:restriction base="xs:string">
             <xs:enumeration value="VN_M_NOISE_PERLIN_ZERO_TO_ONE"/>
             <xs:enumeration value="VN_M_NOISE_PERLIN_MINUS_ONE_TO_ONE"/>
           </xs:restriction>
           </xs:simpleType>
          </xs:element>
         </xs:all>
         <xs:attribute name="id" type="id" use="required"/>
        </xs:complexType>
       </xs:element>

       <xs:element name="fragment-blender">
        <xs:complexType>
         <xs:all>
          <xs:element name="type">
           <xs:simpleType>
            <xs:restriction base="xs:string">
             <xs:enumeration value="VN_M_BLEND_FADE"/>
             <xs:enumeration value="VN_M_BLEND_ADD"/>
             <xs:enumeration value="VN_M_BLEND_SUBTRACT"/>
             <xs:enumeration value="VN_M_BLEND_MULTIPLY"/>
             <xs:enumeration value="VN_M_BLEND_DIVIDE"/>
             <xs:enumeration value="VN_M_BLEND_DOT"/>
            </xs:restriction>
           </xs:simpleType>
          </xs:element>
          <xs:element name="data_a"  type="id" minOccurs="0"/>
          <xs:element name="data_b"  type="id" minOccurs="0"/>
          <xs:element name="control" type="id" minOccurs="0"/>
         </xs:all>
         <xs:attribute name="id" type="id" use="required"/>
        </xs:complexType>
       </xs:element>

       <xs:element name="fragment-matrix">
        <xs:complexType>
         <xs:all>
          <xs:element name="data" type="id" minOccurs="0"/>
          <xs:element name="matrix">
           <xs:simpleType>
            <xs:list itemType="xs:double"/>	<!-- FIXME: Should restrict length to 16 elements. -->
           </xs:simpleType>
          </xs:element>
         </xs:all>
         <xs:attribute name="id" type="id" use="required"/>
        </xs:complexType>
       </xs:element>

       <xs:element name="fragment-ramp">
        <xs:complexType>
         <xs:all>
          <xs:element name="type">
           <xs:simpleType>
            <xs:restriction base="xs:string">
             <xs:enumeration value="VN_M_RAMP_SQUARE"/>
             <xs:enumeration value="VN_M_RAMP_LINEAR"/>
             <xs:enumeration value="VN_M_RAMP_SMOOTH"/>
            </xs:restriction>
           </xs:simpleType>
          </xs:element>
          <xs:element name="channel">
           <xs:simpleType>
            <xs:restriction base="xs:string">
             <xs:enumeration value="VN_M_RAMP_RED"/>
             <xs:enumeration value="VN_M_RAMP_GREEN"/>
             <xs:enumeration value="VN_M_RAMP_BLUE"/>
            </xs:restriction>
           </xs:simpleType>
          </xs:element>
          <xs:element name="mapping" type="id" minOccurs="0"/>
          <xs:element name="ramp">
           <xs:complexType>
            <xs:sequence maxOccurs="unbounded">
             <xs:element name="ramppoint">
              <xs:complexType>
               <xs:simpleContent>
                <xs:extension base="real64-vec3">
                 <xs:attribute name="pos" type="xs:double" use="required"/>
                </xs:extension>
               </xs:simpleContent>
              </xs:complexType>
             </xs:element>
            </xs:sequence>
           </xs:complexType>
          </xs:element>
         </xs:all>
         <xs:attribute name="id" type="id" use="required"/>
        </xs:complexType>
       </xs:element>

       <xs:element name="fragment-animation">
        <xs:complexType>
         <xs:all>
          <xs:element name="label" type="xs:string"/>
         </xs:all>
         <xs:attribute name="id" type="id" use="required"/>
        </xs:complexType>
       </xs:element>

       <xs:element name="fragment-alternative">
        <xs:complexType>
         <xs:all>
          <xs:element name="alt_a" type="id" minOccurs="0"/>
          <xs:element name="alt_b" type="id" minOccurs="0"/>
         </xs:all>
         <xs:attribute name="id" type="id" use="required"/>
        </xs:complexType>
       </xs:element>

       <xs:element name="fragment-output">
        <xs:complexType>
         <xs:all>
          <xs:element name="label" type="xs:string"/>
          <xs:element name="front" type="id" minOccurs="0"/>
          <xs:element name="back"  type="id" minOccurs="0"/>
         </xs:all>
         <xs:attribute name="id" type="id" use="required"/>
        </xs:complexType>
       </xs:element>
      </xs:choice>
     </xs:complexType>
    </xs:element>
   </xs:sequence>
  </xs:extension>
 </xs:complexContent>
</xs:complexType>

<xs:complexType name="node-curve">
 <xs:complexContent>
  <xs:extension base="node">
   <xs:sequence>
    <xs:element name="curves">
     <xs:complexType>
      <xs:choice maxOccurs="unbounded">
       <xs:element name="curve-1d">
        <xs:complexType>
         <xs:choice maxOccurs="unbounded">
          <xs:element name="key" type="key-1d"/>
         </xs:choice>
         <xs:attribute name="name" type="id" use="required"/>
        </xs:complexType>
       </xs:element>

       <xs:element name="curve-2d">
        <xs:complexType>
         <xs:choice maxOccurs="unbounded">
          <xs:element name="key" type="key-2d"/>
         </xs:choice>
         <xs:attribute name="name" type="id" use="required"/>
        </xs:complexType>
       </xs:element>

       <xs:element name="curve-3d">
        <xs:complexType>
         <xs:choice maxOccurs="unbounded">
          <xs:element name="key" type="key-3d"/>
         </xs:choice>
         <xs:attribute name="name" type="id" use="required"/>
        </xs:complexType>
       </xs:element>

       <xs:element name="curve-4d">
        <xs:complexType>
         <xs:choice maxOccurs="unbounded">
          <xs:element name="key" type="key-4d"/>
         </xs:choice>
         <xs:attribute name="name" type="id" use="required"/>
        </xs:complexType>
       </xs:element>
      </xs:choice>
     </xs:complexType>
    </xs:element>
   </xs:sequence>
  </xs:extension>
 </xs:complexContent>
</xs:complexType>

<!-- Text nodes; by far the simplest to specify. Use of CDATA warmly recommended. -->
<xs:complexType name="node-text">
 <xs:complexContent>
  <xs:extension base="node">
   <xs:sequence>
    <xs:element name="language" type="xs:string"/>
    <xs:element name="buffers">
     <xs:complexType>
      <xs:choice maxOccurs="unbounded">
       <xs:element name="buffer">
        <xs:complexType mixed="true">
         <xs:attribute name="name" type="xs:string" use="required"/>
        </xs:complexType>
       </xs:element>
      </xs:choice>
     </xs:complexType>
    </xs:element>
   </xs:sequence>
  </xs:extension>
 </xs:complexContent>
</xs:complexType>

<xs:complexType name="node-audio">
 <xs:complexContent>
  <xs:extension base="node">
   <xs:sequence>
    <xs:element name="buffers" minOccurs="0">
     <xs:complexType>
      <xs:choice maxOccurs="unbounded">

       <xs:element name="buffer-int8">
        <xs:complexType>
         <xs:sequence>
          <xs:element name="blocks">
           <xs:complexType>
            <xs:sequence maxOccurs="unbounded">
             <xs:element name="block" type="block-int8"/>
            </xs:sequence>
           </xs:complexType>
          </xs:element>
         </xs:sequence>
         <xs:attribute name="name" type="xs:string" use="required"/>
         <xs:attribute name="frequency" type="xs:double" use="required"/>
        </xs:complexType>
       </xs:element>

       <xs:element name="buffer-int16">
        <xs:complexType>
         <xs:sequence>
          <xs:element name="blocks">
           <xs:complexType>
            <xs:sequence maxOccurs="unbounded">
             <xs:element name="block" type="int16-vec512"/>
            </xs:sequence>
           </xs:complexType>
          </xs:element>
         </xs:sequence>
         <xs:attribute name="name" type="xs:string" use="required"/>
         <xs:attribute name="frequency" type="xs:double" use="required"/>
        </xs:complexType>
       </xs:element>

       <xs:element name="buffer-int24">
        <xs:complexType>
         <xs:sequence>
          <xs:element name="blocks">
           <xs:complexType>
            <xs:sequence maxOccurs="unbounded">
             <xs:element name="block" type="int24-vec384"/>
            </xs:sequence>
           </xs:complexType>
          </xs:element>
         </xs:sequence>
         <xs:attribute name="name" type="xs:string" use="required"/>
         <xs:attribute name="frequency" type="xs:double" use="required"/>
        </xs:complexType>
       </xs:element>

       <xs:element name="buffer-int32">
        <xs:complexType>
         <xs:sequence>
          <xs:element name="blocks">
           <xs:complexType>
            <xs:sequence maxOccurs="unbounded">
             <xs:element name="block" type="int32-vec256"/>
            </xs:sequence>
           </xs:complexType>
          </xs:element>
         </xs:sequence>
         <xs:attribute name="name" type="xs:string" use="required"/>
         <xs:attribute name="frequency" type="xs:double" use="required"/>
        </xs:complexType>
       </xs:element>

       <xs:element name="buffer-real32">
        <xs:complexType>
         <xs:sequence>
          <xs:element name="blocks">
           <xs:complexType>
            <xs:sequence maxOccurs="unbounded">
             <xs:element name="block" type="real32-vec256"/>
            </xs:sequence>
           </xs:complexType>
          </xs:element>
         </xs:sequence>
         <xs:attribute name="name" type="xs:string" use="required"/>
         <xs:attribute name="frequency" type="xs:double" use="required"/>
        </xs:complexType>
       </xs:element>

       <xs:element name="buffer-real64">
        <xs:complexType>
         <xs:sequence>
          <xs:element name="blocks">
           <xs:complexType>
            <xs:sequence maxOccurs="unbounded">
             <xs:element name="block" type="real64-vec128"/>
            </xs:sequence>
           </xs:complexType>
          </xs:element>
         </xs:sequence>
         <xs:attribute name="name" type="xs:string" use="required"/>
         <xs:attribute name="frequency" type="xs:double" use="required"/>
        </xs:complexType>
       </xs:element>

      </xs:choice>
     </xs:complexType>
    </xs:element>

    <xs:element name="streams" minOccurs="0">
     <!-- FIXME: Missing support for streams, here. -->
    </xs:element>
   </xs:sequence>
  </xs:extension>
 </xs:complexContent>
</xs:complexType>

<!-- =========================================================================================== -->

<!-- Actual top-level document structure definition. It's just a bunch of nodes. -->

<xs:element name="vml">
 <xs:complexType>
  <xs:choice maxOccurs="unbounded">
   <xs:element name="node-object"   type="node-object"/>
   <xs:element name="node-geometry" type="node-geometry"/>
   <xs:element name="node-material" type="node-material"/>
   <xs:element name="node-bitmap"   type="node-bitmap"/>
   <xs:element name="node-curve"    type="node-curve"/>
   <xs:element name="node-text"     type="node-text"/>
   <xs:element name="node-audio"    type="node-audio"/>	<!-- Partial support only. -->
  </xs:choice>
  <xs:attribute name="version" type="xs:string"/>
 </xs:complexType>
</xs:element>

</xs:schema>
